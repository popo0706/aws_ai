# ▼今回のポイント・用語まとめ
# ・STS(Security Token Service) : 一時的に使える鍵(クレデンシャル)を発行するサービス
# ・AssumeRole(ロール引き受け) : 他の IAM ロールの権限を一時的に借りる操作
# ・Session(セッション)        : boto3 で AWS にログインする“箱”
# ・Bedrock Runtime            : AWS が提供する生成 AI(LLM) を呼び出す窓口
# ・リージョン(ap-northeast-1) : 東京リージョンのこと

"""
このスクリプトは
1. 既存の AWS プロファイル(base) で STS を呼び出し
2. developer ロールへ AssumeRole して“一時クレデンシャル”を取得
3. その一時クレデンシャルで新しい Session を作成し
4. Bedrock の Claude 3 Haiku モデルに「こんにちは」と送信
5. 返答をコンソールに表示します。

『ロールを切り替えてから生成 AI を使う』実務で頻出の流れを学べるサンプルです。
"""

# ----- ライブラリ読み込み ---------------------------------------------------
import boto3  # AWS を Python から操作するための公式 SDK (参考: https://boto3.amazonaws.com/)

# ---------------------------------------------------------------------------
# ① ベース認証で STS クライアントを作成
#    ~/.aws/credentials 内の [base] プロファイルを使ってログインする
# ---------------------------------------------------------------------------
base = boto3.Session(
    profile_name="base", region_name="ap-northeast-1"
)  # ← 基本資格情報
sts = base.client("sts")  # STS = Security Token Service

# ---------------------------------------------------------------------------
# ② ロールを引き受け、一時クレデンシャルを取得
#    AssumeRole を呼ぶと 60 分など時間限定の鍵が返る
# ---------------------------------------------------------------------------
resp = sts.assume_role(
    RoleArn="arn:aws:iam::068025898490:role/developer",  # 借りたい IAM ロールの ARN
    RoleSessionName="dev-role-session",  # CloudTrail 等で判別しやすい任意名
)
creds = resp["Credentials"]  # 返ってきた JSON から鍵を取り出し

# ---------------------------------------------------------------------------
# ③ 一時クレデンシャルを使って新しい Session を作成
#    ここから先は「developer ロール」として行動できる
# ---------------------------------------------------------------------------
session = boto3.Session(
    aws_access_key_id=creds["AccessKeyId"],  # 一時アクセスキー
    aws_secret_access_key=creds["SecretAccessKey"],  # 一時シークレットキー
    aws_session_token=creds["SessionToken"],  # 一時セッショントークン
    region_name="ap-northeast-1",  # 東京リージョン
)

# ---------------------------------------------------------------------------
# ④ Bedrock へアクセスするクライアントを準備
# ---------------------------------------------------------------------------
client = session.client("bedrock-runtime")  # Bedrock Runtime のエンドポイントを操作

# ---------------------------------------------------------------------------
# ⑤ Claude 3 Haiku モデルへ「こんにちは」を送信
# ---------------------------------------------------------------------------
response = client.converse(
    modelId="anthropic.claude-3-haiku-20240307-v1:0",  # 使用するモデル ID
    messages=[  # 会話履歴(リスト形式)
        {"role": "user", "content": [{"text": "こんにちは"}]}  # ユーザが話した内容
    ],
)

# ---------------------------------------------------------------------------
# ⑥ 返ってきたテキストを抽出して画面に表示
# ---------------------------------------------------------------------------
print(
    response["output"]["message"]["content"][0]["text"]
)  # ネストされた JSON からテキストを取得
