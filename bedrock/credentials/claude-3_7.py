# ▼今回のポイント・用語まとめ
# ・STS(Security Token Service) : 一時的な鍵(クレデンシャル)を発行する AWS のサービス
# ・AssumeRole(ロール引き受け) : 他人(別 IAM ロール)になりすませるしくみ
# ・Session　　　　　　　      : boto3 で AWS とやり取りするときのログイン“箱”
# ・Bedrock　　　　　　　      : AWS が提供する生成 AI をまとめて呼び出せるサービス
# ・リージョン　　　　　　      : サーバが置いてある場所。ここでは東京(ap-northeast-1)

"""
このスクリプトは
1. 既存の AWS 資格情報(profile_name="base") で STS を呼び出し
2. developer ロールに AssumeRole して“一時クレデンシャル”を取得
3. その一時クレデンシャルで新しい Session を作り直し
4. Bedrock の Claude 3 Sonnet モデルへ「こんにちは」と送信
5. 生成 AI からの返答をコンソール表示するサンプルです。

『ロールを切り替えてから生成 AI を使う』という実務でよくあるパターンを学べます。
"""

# -----------------------------------------------------------------------
# ライブラリ読み込み
# -----------------------------------------------------------------------
import boto3  # AWS を Python から操作する公式 SDK (参考: https://boto3.amazonaws.com/)

# -----------------------------------------------------------------------
# ① ベース認証で STS クライアントを作成
# -----------------------------------------------------------------------
base = boto3.Session(
    profile_name="base", region_name="ap-northeast-1"
)  # ~/.aws/credentials の [base] を使用
sts = base.client("sts")  # STS = Security Token Service

# -----------------------------------------------------------------------
# ② ロールを引き受け、一時クレデンシャルを取得
# -----------------------------------------------------------------------
resp = sts.assume_role(  # AssumeRole API を実行
    RoleArn="arn:aws:iam::068025898490:role/developer",  # 引き受けたいロールの ARN
    RoleSessionName="dev-role-session",  # 監査ログで見分けやすい任意の名前
)
creds = resp["Credentials"]  # 返ってきた JSON から鍵情報を抜き出し

# -----------------------------------------------------------------------
# ③ 一時クレデンシャルで新しい Session を作成
# -----------------------------------------------------------------------
session = boto3.Session(
    aws_access_key_id=creds["AccessKeyId"],  # 一時アクセスキー
    aws_secret_access_key=creds["SecretAccessKey"],  # 一時シークレットキー
    aws_session_token=creds["SessionToken"],  # 一時セッショントークン
    region_name="ap-northeast-1",  # 東京リージョン
)

# -----------------------------------------------------------------------
# ④ Bedrock へアクセスできるクライアントを用意
# -----------------------------------------------------------------------
client = session.client("bedrock-runtime")  # Bedrock Runtime のエンドポイント

# -----------------------------------------------------------------------
# ⑤ Claude 3 Sonnet に「こんにちは」を送信
# -----------------------------------------------------------------------
response = client.converse(
    modelId="apac.anthropic.claude-3-7-sonnet-20250219-v1:0",  # 使用するモデル ID
    messages=[  # Claude に渡す会話履歴(リスト形式)
        {"role": "user", "content": [{"text": "こんにちは"}]}  # ユーザがしゃべった内容
    ],
)

# -----------------------------------------------------------------------
# ⑥ 返ってきたテキストを表示
# -----------------------------------------------------------------------
print(
    response["output"]["message"]["content"][0]["text"]
)  # ネストされた JSON をキーでたどる
